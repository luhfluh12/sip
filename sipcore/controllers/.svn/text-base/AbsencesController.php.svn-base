<?php

class AbsencesController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
                    'absenceStudent + create, delete, authorize, saveInterval',
                    'accessControl - create, delete, authorize, saveInterval', // perform access control for CRUD operations
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'roles'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

        public function filterAbsenceStudent ($c) {
            if (Yii::app()->user->checkAccess('admin')) {
                $c->run();
            } else {
                if (isset($_POST['student']))
                    $studentId = (int) $_POST['student'];
                elseif (isset($_POST['Absences']['student']))
                    $studentId=(int) $_POST['Absences']['student'];
                else
                    $studentId=false;
                    
                if ($studentId) {
                    $student = Student::model()->with('rClass')->findByPk($studentId,array('select'=>'`rClass`.`id`,`rClass`.`school`'));
                    if ($student===null) throw new CHttpException(403, 'You don\'t have access to edit this student\'s school marks or absences.');
                    $class= $student->rClass;
                } elseif (isset($_GET['id'])) {
                    $absence = Absences::model()->with('rStudent.rClass')->findByPk((int) $_GET['id'],array('select'=>'`rClass`.`id`'));
                    if ($absence===null) throw new CHttpException(403, 'You don\'t have access to edit this student\'s school marks or absences.');
                    $class = $absence->rStudent->rClass;
                } else
                    throw new CHttpException(403, 'You don\'t have access to edit this student\'s school marks or absences.');
                // luam tipul contului si datele necesare
                $account = Account::model()->findByPk(Yii::app()->user->id);
                if ($account!==NULL && $account->type == Account::TYPE_TEACHER && $account->rTeacher->class === $class->id)
                        $c -> run();
                elseif ($account!==NULL && $account->type == Account::TYPE_SCHOOL && $class->school == $account->info)
                        $c -> run();
                else
                    throw new CHttpException(403,'You can\'t edit this student\'s absences.');
            }
        }
        
	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
		if(isset($_POST['Absences']))
		{
                    $model=new Absences;
                    $model->attributes=$_POST['Absences'];
                    if($model->save()){
                        echo '1::';
                        $this->renderPartial('_view',array('absence'=>$model));
                        Yii::app()->end();
                    } else {
                        echo '2::';
                        $this->renderPartial('_error',array('errors'=>$model->getErrors()));
                    }
		} else
                    throw new CHttpException(403, 'Absențele se adaugă din profilul elevului.');
	}

	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionAuthorize($id)
	{
		$model=$this->loadModel($id);

		if(isset($_POST['authorized']) && ($_POST['authorized']==1 || $_POST['authorized']==2))
		{
                    $model->authorized=$_POST['authorized'];
                    if($model->update(array('authorized'))) {
                        echo 1;
                        Yii::app()->end();
                    }
        	}
                echo 2;
                Yii::app()->end();
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'index' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		if(Yii::app()->request->isPostRequest)
		{
			// we only allow deletion via POST request
			$this->loadModel($id)->delete();

			// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
			if(!isset($_GET['ajax']))
				$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
		}
		else
			throw new CHttpException(400,'Invalid request. Please do not repeat this request again.');
	}
        
	/**
	 * Adds an interval of absences.
	 * Needs $_POST start, end and student
	 * 
	 */
	public function actionSaveInterval()
	{
		if(Yii::app()->request->isPostRequest && isset($_POST['start'], $_POST['end'], $_POST['student']))
		{
                        $student = Student::model()->findByPk((int) $_POST['student']);
                        if ($student===null) CHttpException(403,'Elevul nu există în baza de date.');
                        echo json_encode(Absences::model()->saveInterval($_POST['start'], $_POST['end'], $student));
		}
		else
			throw new CHttpException(400,'Invalid request. Please do not repeat this request again.');
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer the ID of the model to be loaded
	 */
	public function loadModel($id)
	{
		$model=Absences::model()->findByPk((int)$id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}
}
